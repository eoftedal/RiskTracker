<% content_for :title, " - " << @project.name %>

<% content_for :sidebar do %>
    <li class="nav-header">Content</li>
    <li><%= link_to "List risks", project_risks_path(@project) %></li>
    <li><%= link_to "List assets", project_risk_assets_path(@project) %></li>
    <li><%= link_to "Show checklists", checklists_project_risks_path(@project) %></li>
    <li><%= link_to "Risk levels", risk_levels_project_path(@project) %></li>
    <% if current_user.is_admin? then %>
        <li class="nav-header">Project</li>
        <li><%= link_to 'Edit project', edit_project_path(@project) %></li>
        <li><%= link_to 'Export project', export_project_path(@project) %></li>
    <% end %>
<% end%>

<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/assets/mochikit/MochiKit.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/assets/plotkit/Base.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/assets/plotkit/Layout.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/assets/plotkit/Canvas.js"></script>
<script type="text/javascript" src="<%= ENV['RAILS_RELATIVE_URL_ROOT'] %>/assets/plotkit/SweetCanvas.js"></script>

<p id="notice"><%= notice %></p>

<h1>
  <%= @project.name %>
</h1>


<% if current_user.is_admin? then %>
<p>
  <b>Risk configuration:</b>
  <%= link_to @project.risk_configuration.name, @project.risk_configuration %>
</p>
<% end %>



<table class="risk_list">
	<tr>
		<th></th>
		<% @project.risk_configuration.risk_levels.sort_by(&:weight).each do |risk_level| %>
			<th class="impact"><%= risk_level.name %></th>
		<% end %>
	</tr>
<% @project.visible_impacts.each do |impact| %>
	<tr class="<%= impact.hidden ? "muted" : "" %>">
		<th><%= impact.name %></th>
		<% @project.risk_configuration.risk_levels.sort_by(&:weight).each do |risk_level| %>
			<% 
			 count =  @project.risks.select{|r| r.impact == impact && r.risk_level == risk_level}.count()
			 count_overridden = @project.risks.select{|r| r.impact == impact && r.risk_level == risk_level && r.accepted_override }.count() 
			 weightclass = "low"
			 if (risk_level.weight > impact.risk_level.weight) then
			 	weightclass = "medium"
			 end
			 if (impact.risk_level.above != NIL && risk_level.weight > impact.risk_level.above.weight ) then
			 	weightclass = "high"
			 end

			%>
			<td class="<%= weightclass %> <%= (count - count_overridden) > 0 && (risk_level.weight > impact.risk_level.weight ? "tooHigh" : "") %>">
				<a href="<%= project_risks_path(@project) %>?risklevel=<%= risk_level.id %>&impact=<%= impact.id %>">
					<%= count - count_overridden %>
					<% if (count_overridden > 0)  %>
						+ <span><%= count_overridden %></span>
					<% end %>
				</a>
			</td>
		<% end %>
	</tr>
<% end %>
</table>


<table class="risk_list risk_levels">
  <tr>
    <th rowspan="<%= @project.risk_configuration.risk_probabilities.count + 2 %>" class="vertical_label"><br><br><label>Probabilities</label></th>
    <th> </th>
    <th colspan="<%= @project.risk_configuration.risk_consequences.count %>"><label>Consequences</label></th>
  </tr>
  <tr>
    <th> </th>
    <% @project.risk_configuration.risk_consequences.sort_by{|p| p.weight}.each do |rc| %>
      <th><%= rc.name %></th>
    <% end %>
  </tr>
<% @project.risk_configuration.risk_probabilities.sort_by{|p| p.weight}.each do |rp| %>
  <tr>
    <th><%= rp.name %></th>
    <% @project.risk_configuration.risk_consequences.sort_by{|p| p.weight}.each do |rc| %>
      <% rl = @project.risk_configuration.find_level(rp, rc) %>
      <td class="risk_level_<%= rl.color %>"><%= 
        @project.risks.select{|r| r.risk_consequence == rc && r.risk_probability == rp}.count()
      %></td>
    <% end %>
  </tr>
<% end %>
</table>




<div class="graphContainer loading">
<canvas class="demo" id="graph"></canvas>
</div>





<script>

var oldGraphWidth = -1;
var oldScroll = -1;
var graphData;
var days = <%= @project.days_since_creation %>;


function toggleZoom() {
    var elm = $(".graphContainer");
    var width = oldGraphWidth;
    if (elm.hasClass("zoomed")) {
        oldScroll = elm.scrollLeft();
        elm.removeClass("zoomed");
    } else {
        elm.addClass("zoomed");
        width = days * 10;
    }
    elm.text("");
    $("<canvas>").attr("id", "graph").attr("width", width).appendTo(elm);
    drawGraph();
    elm.css({"width": "auto"});
    if (elm.hasClass("zoomed")) {
        elm.scrollLeft(oldScroll > -1 ? oldScroll : width);
    }
}



function drawGraph() {
    var zoomed = $(".graphContainer").hasClass("zoomed");
    var xTicks = graphData.week_ticks;
    if (days > 100 && !zoomed) {
        xTicks = graphData.month_ticks;
    }
    var layout = new PlotKit.Layout("line", {yTickPrecision: 0, xTicks: xTicks });
    layout.addDataset("Too high", graphData.total_risk );
    layout.addDataset("Accepted", graphData.accepted_risk);
    layout.evaluate();
    var canvas = MochiKit.DOM.getElement("graph");
    var plotter = new PlotKit.SweetCanvasRenderer(canvas, layout, {
        "colorScheme": [Color.fromRGB(0.87, 0.32, 0.30, 1), Color.fromRGB(0.37, 0.73, 0.37, 1)]
    });
    plotter.render();
}

function loadGraph() {
    if (oldGraphWidth == -1) {
        //oldGraphWidth = $("#graph").attr("width");
        oldGraphWidth = $(".graphContainer").width();
        $("#graph").attr("width", oldGraphWidth)
        $(".graphContainer").click(toggleZoom);
    }
    $.getJSON('<%= graph_project_path %>', function(data) {
        graphData = data;
        $(".graphContainer").removeClass("loading");
        drawGraph();
    });
}

MochiKit.DOM.addLoadEvent(loadGraph);
</script>

